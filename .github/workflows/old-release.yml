# Release workflow.
name: Old-Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  # push:
  #   tags:
  #     - 'v[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  release-notes:
    runs-on:
      group: Default
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate Release Notes
        run: |
          export PREV_TAG=$(git tag --list 'v*' --sort=-version:refname | head -n 2 | tail -n 1)
          export PREV_VERSION=${PREV_TAG//v}
          sed -n -e "1{/# /d;}" -e "2{/^$/d;}" -e "/# $PREV_VERSION/q;p" CHANGELOG.md > release-notes.txt
      - uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.txt
          retention-days: 1
  publish-release:
    needs: [release-notes]
    runs-on:
      group: Default
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: release-notes-download
        name: Release Notes Download
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: release-notes
          path: /tmp
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ steps.release-notes-download.outputs.download-path }}/release-notes.txt
  highest-version-tag:
    needs: [publish-release]
    runs-on:
      group: Default
    outputs:
      tag: ${{ steps.highest-version-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Allow tag to be fetched when ref is a commit
          fetch-depth: 0
      - name: Output highest version tag
        id: highest-version-tag
        run: |
          HIGHEST=$(git tag | sort -V | tail -1)
          echo "tag=$HIGHEST" >> "$GITHUB_OUTPUT"
  changelog-newversion:
    needs: [highest-version-tag]
    if: github.ref_name == needs.highest-version-tag.outputs.tag
    runs-on:
      group: Default
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHANGELOG_PAT }}
          fetch-depth: 0
          ref: main
      - name: Update Changelog Header
        run: |
          CHANGELOG_FILE_NAME="CHANGELOG.md"
          PREVIOUS_RELEASE_TAG=${{ github.ref_name }}

          # Add Release Date
          RELEASE_DATE=`date +%B' '%e', '%Y`
          sed -i -e "1 s/.*Unreleased.*/## ${PREVIOUS_RELEASE_TAG#v} ($RELEASE_DATE)/" $CHANGELOG_FILE_NAME

          # Prepend next release line
          echo Previous release is: $PREVIOUS_RELEASE_TAG

          NEW_RELEASE_LINE=$(echo $PREVIOUS_RELEASE_TAG | awk -F. '{
              $1 = substr($1,2)
              $2 += 1
              printf("%s.%01d.0\n\n", $1, $2);
          }')

          echo New minor version is: v$NEW_RELEASE_LINE

          echo -e "## $NEW_RELEASE_LINE (Unreleased)\n$(cat $CHANGELOG_FILE_NAME)" > $CHANGELOG_FILE_NAME
      - run: |
            git config --local user.email changelogbot-cloudavenue@orange.com
            git config --local user.name changelogbot-cloudavenue
            git add CHANGELOG.md
            git commit -m "Update CHANGELOG.md after ${{ github.ref_name }}"
            git push
