// SPDX-FileCopyrightText: Copyright (c) 2025 Orange
// SPDX-License-Identifier: Mozilla Public License 2.0
// This software is distributed under the MPL-2.0 license.
// the text of which is available at https://www.mozilla.org/en-US/MPL/2.0/
// or see the "LICENSE" file for more details.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=zz_generated_client_test.go -self_package github.com/orange-cloudavenue/cloudavenue-sdk-go/v1/edgegateway -package edgegateway -copyright_file ../../mock_header.txt
//

// Package edgegateway is a generated GoMock package.
package edgegateway

import (
	context "context"
	http "net/http"
	url "net/url"
	reflect "reflect"

	resty "github.com/go-resty/resty/v2"
	govcd "github.com/vmware/go-vcloud-director/v2/govcd"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateEdgeGateway mocks base method.
func (m *MockClient) CreateEdgeGateway(ctx context.Context, edgeGateway *EdgeGatewayModelRequest) (*EdgeGatewayModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEdgeGateway", ctx, edgeGateway)
	ret0, _ := ret[0].(*EdgeGatewayModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEdgeGateway indicates an expected call of CreateEdgeGateway.
func (mr *MockClientMockRecorder) CreateEdgeGateway(ctx, edgeGateway any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEdgeGateway", reflect.TypeOf((*MockClient)(nil).CreateEdgeGateway), ctx, edgeGateway)
}

// DeleteEdgeGateway mocks base method.
func (m *MockClient) DeleteEdgeGateway(ctx context.Context, edgeGatewayNameOrID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEdgeGateway", ctx, edgeGatewayNameOrID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEdgeGateway indicates an expected call of DeleteEdgeGateway.
func (mr *MockClientMockRecorder) DeleteEdgeGateway(ctx, edgeGatewayNameOrID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEdgeGateway", reflect.TypeOf((*MockClient)(nil).DeleteEdgeGateway), ctx, edgeGatewayNameOrID)
}

// GetEdgeGateway mocks base method.
func (m *MockClient) GetEdgeGateway(ctx context.Context, edgeGatewayNameOrID string) (*EdgeGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEdgeGateway", ctx, edgeGatewayNameOrID)
	ret0, _ := ret[0].(*EdgeGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEdgeGateway indicates an expected call of GetEdgeGateway.
func (mr *MockClientMockRecorder) GetEdgeGateway(ctx, edgeGatewayNameOrID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEdgeGateway", reflect.TypeOf((*MockClient)(nil).GetEdgeGateway), ctx, edgeGatewayNameOrID)
}

// ListEdgeGateway mocks base method.
func (m *MockClient) ListEdgeGateway(ctx context.Context) ([]*EdgeGatewayModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEdgeGateway", ctx)
	ret0, _ := ret[0].([]*EdgeGatewayModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEdgeGateway indicates an expected call of ListEdgeGateway.
func (mr *MockClientMockRecorder) ListEdgeGateway(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEdgeGateway", reflect.TypeOf((*MockClient)(nil).ListEdgeGateway), ctx)
}

// UpdateEdgeGateway mocks base method.
func (m *MockClient) UpdateEdgeGateway(ctx context.Context, edgeGateway *EdgeGatewayModelUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEdgeGateway", ctx, edgeGateway)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEdgeGateway indicates an expected call of UpdateEdgeGateway.
func (mr *MockClientMockRecorder) UpdateEdgeGateway(ctx, edgeGateway any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEdgeGateway", reflect.TypeOf((*MockClient)(nil).UpdateEdgeGateway), ctx, edgeGateway)
}

// MockclientInterface is a mock of clientInterface interface.
type MockclientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockclientInterfaceMockRecorder
	isgomock struct{}
}

// MockclientInterfaceMockRecorder is the mock recorder for MockclientInterface.
type MockclientInterfaceMockRecorder struct {
	mock *MockclientInterface
}

// NewMockclientInterface creates a new mock instance.
func NewMockclientInterface(ctrl *gomock.Controller) *MockclientInterface {
	mock := &MockclientInterface{ctrl: ctrl}
	mock.recorder = &MockclientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientInterface) EXPECT() *MockclientInterfaceMockRecorder {
	return m.recorder
}

// GetAllNsxtEdgeGateways mocks base method.
func (m *MockclientInterface) GetAllNsxtEdgeGateways(queryParameters url.Values) ([]*govcd.NsxtEdgeGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNsxtEdgeGateways", queryParameters)
	ret0, _ := ret[0].([]*govcd.NsxtEdgeGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNsxtEdgeGateways indicates an expected call of GetAllNsxtEdgeGateways.
func (mr *MockclientInterfaceMockRecorder) GetAllNsxtEdgeGateways(queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNsxtEdgeGateways", reflect.TypeOf((*MockclientInterface)(nil).GetAllNsxtEdgeGateways), queryParameters)
}

// GetClient mocks base method.
func (m *MockclientInterface) GetClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockclientInterfaceMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockclientInterface)(nil).GetClient))
}

// GetNsxtEdgeGatewayById mocks base method.
func (m *MockclientInterface) GetNsxtEdgeGatewayById(id string) (*govcd.NsxtEdgeGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNsxtEdgeGatewayById", id)
	ret0, _ := ret[0].(*govcd.NsxtEdgeGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNsxtEdgeGatewayById indicates an expected call of GetNsxtEdgeGatewayById.
func (mr *MockclientInterfaceMockRecorder) GetNsxtEdgeGatewayById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNsxtEdgeGatewayById", reflect.TypeOf((*MockclientInterface)(nil).GetNsxtEdgeGatewayById), id)
}

// GetNsxtEdgeGatewayByName mocks base method.
func (m *MockclientInterface) GetNsxtEdgeGatewayByName(name string) (*govcd.NsxtEdgeGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNsxtEdgeGatewayByName", name)
	ret0, _ := ret[0].(*govcd.NsxtEdgeGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNsxtEdgeGatewayByName indicates an expected call of GetNsxtEdgeGatewayByName.
func (mr *MockclientInterfaceMockRecorder) GetNsxtEdgeGatewayByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNsxtEdgeGatewayByName", reflect.TypeOf((*MockclientInterface)(nil).GetNsxtEdgeGatewayByName), name)
}

// GetVDCById mocks base method.
func (m *MockclientInterface) GetVDCById(vdcID string, refresh bool) (*govcd.Vdc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVDCById", vdcID, refresh)
	ret0, _ := ret[0].(*govcd.Vdc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVDCById indicates an expected call of GetVDCById.
func (mr *MockclientInterfaceMockRecorder) GetVDCById(vdcID, refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVDCById", reflect.TypeOf((*MockclientInterface)(nil).GetVDCById), vdcID, refresh)
}

// GetVdcGroupById mocks base method.
func (m *MockclientInterface) GetVdcGroupById(id string) (*govcd.VdcGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVdcGroupById", id)
	ret0, _ := ret[0].(*govcd.VdcGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVdcGroupById indicates an expected call of GetVdcGroupById.
func (mr *MockclientInterfaceMockRecorder) GetVdcGroupById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVdcGroupById", reflect.TypeOf((*MockclientInterface)(nil).GetVdcGroupById), id)
}

// R mocks base method.
func (m *MockclientInterface) R() *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R")
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// R indicates an expected call of R.
func (mr *MockclientInterfaceMockRecorder) R() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R", reflect.TypeOf((*MockclientInterface)(nil).R))
}

// Refresh mocks base method.
func (m *MockclientInterface) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockclientInterfaceMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockclientInterface)(nil).Refresh))
}

// MockclientGoVCDOrg is a mock of clientGoVCDOrg interface.
type MockclientGoVCDOrg struct {
	ctrl     *gomock.Controller
	recorder *MockclientGoVCDOrgMockRecorder
	isgomock struct{}
}

// MockclientGoVCDOrgMockRecorder is the mock recorder for MockclientGoVCDOrg.
type MockclientGoVCDOrgMockRecorder struct {
	mock *MockclientGoVCDOrg
}

// NewMockclientGoVCDOrg creates a new mock instance.
func NewMockclientGoVCDOrg(ctrl *gomock.Controller) *MockclientGoVCDOrg {
	mock := &MockclientGoVCDOrg{ctrl: ctrl}
	mock.recorder = &MockclientGoVCDOrgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientGoVCDOrg) EXPECT() *MockclientGoVCDOrgMockRecorder {
	return m.recorder
}

// GetAllNsxtEdgeGateways mocks base method.
func (m *MockclientGoVCDOrg) GetAllNsxtEdgeGateways(queryParameters url.Values) ([]*govcd.NsxtEdgeGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNsxtEdgeGateways", queryParameters)
	ret0, _ := ret[0].([]*govcd.NsxtEdgeGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNsxtEdgeGateways indicates an expected call of GetAllNsxtEdgeGateways.
func (mr *MockclientGoVCDOrgMockRecorder) GetAllNsxtEdgeGateways(queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNsxtEdgeGateways", reflect.TypeOf((*MockclientGoVCDOrg)(nil).GetAllNsxtEdgeGateways), queryParameters)
}

// GetNsxtEdgeGatewayById mocks base method.
func (m *MockclientGoVCDOrg) GetNsxtEdgeGatewayById(id string) (*govcd.NsxtEdgeGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNsxtEdgeGatewayById", id)
	ret0, _ := ret[0].(*govcd.NsxtEdgeGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNsxtEdgeGatewayById indicates an expected call of GetNsxtEdgeGatewayById.
func (mr *MockclientGoVCDOrgMockRecorder) GetNsxtEdgeGatewayById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNsxtEdgeGatewayById", reflect.TypeOf((*MockclientGoVCDOrg)(nil).GetNsxtEdgeGatewayById), id)
}

// GetNsxtEdgeGatewayByName mocks base method.
func (m *MockclientGoVCDOrg) GetNsxtEdgeGatewayByName(name string) (*govcd.NsxtEdgeGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNsxtEdgeGatewayByName", name)
	ret0, _ := ret[0].(*govcd.NsxtEdgeGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNsxtEdgeGatewayByName indicates an expected call of GetNsxtEdgeGatewayByName.
func (mr *MockclientGoVCDOrgMockRecorder) GetNsxtEdgeGatewayByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNsxtEdgeGatewayByName", reflect.TypeOf((*MockclientGoVCDOrg)(nil).GetNsxtEdgeGatewayByName), name)
}

// GetVDCById mocks base method.
func (m *MockclientGoVCDOrg) GetVDCById(vdcID string, refresh bool) (*govcd.Vdc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVDCById", vdcID, refresh)
	ret0, _ := ret[0].(*govcd.Vdc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVDCById indicates an expected call of GetVDCById.
func (mr *MockclientGoVCDOrgMockRecorder) GetVDCById(vdcID, refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVDCById", reflect.TypeOf((*MockclientGoVCDOrg)(nil).GetVDCById), vdcID, refresh)
}

// GetVdcGroupById mocks base method.
func (m *MockclientGoVCDOrg) GetVdcGroupById(id string) (*govcd.VdcGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVdcGroupById", id)
	ret0, _ := ret[0].(*govcd.VdcGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVdcGroupById indicates an expected call of GetVdcGroupById.
func (mr *MockclientGoVCDOrgMockRecorder) GetVdcGroupById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVdcGroupById", reflect.TypeOf((*MockclientGoVCDOrg)(nil).GetVdcGroupById), id)
}

// MockclientCloudavenue is a mock of clientCloudavenue interface.
type MockclientCloudavenue struct {
	ctrl     *gomock.Controller
	recorder *MockclientCloudavenueMockRecorder
	isgomock struct{}
}

// MockclientCloudavenueMockRecorder is the mock recorder for MockclientCloudavenue.
type MockclientCloudavenueMockRecorder struct {
	mock *MockclientCloudavenue
}

// NewMockclientCloudavenue creates a new mock instance.
func NewMockclientCloudavenue(ctrl *gomock.Controller) *MockclientCloudavenue {
	mock := &MockclientCloudavenue{ctrl: ctrl}
	mock.recorder = &MockclientCloudavenueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientCloudavenue) EXPECT() *MockclientCloudavenueMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockclientCloudavenue) GetClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockclientCloudavenueMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockclientCloudavenue)(nil).GetClient))
}

// R mocks base method.
func (m *MockclientCloudavenue) R() *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R")
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// R indicates an expected call of R.
func (mr *MockclientCloudavenueMockRecorder) R() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R", reflect.TypeOf((*MockclientCloudavenue)(nil).R))
}

// Refresh mocks base method.
func (m *MockclientCloudavenue) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockclientCloudavenueMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockclientCloudavenue)(nil).Refresh))
}
