// SPDX-FileCopyrightText: Copyright (c) 2025 Orange
// SPDX-License-Identifier: Mozilla Public License 2.0
// This software is distributed under the MPL-2.0 license.
// the text of which is available at https://www.mozilla.org/en-US/MPL/2.0/
// or see the "LICENSE" file for more details.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=zz_generated_client_test.go -self_package github.com/orange-cloudavenue/cloudavenue-sdk-go/v1/edgeloadbalancer -package edgeloadbalancer -copyright_file ../../mock_header.txt
//

// Package edgeloadbalancer is a generated GoMock package.
package edgeloadbalancer

import (
	context "context"
	url "net/url"
	reflect "reflect"

	resty "github.com/go-resty/resty/v2"
	govcd "github.com/vmware/go-vcloud-director/v2/govcd"
	types "github.com/vmware/go-vcloud-director/v2/types/v56"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreatePool mocks base method.
func (m *MockClient) CreatePool(ctx context.Context, pool PoolModelRequest) (*PoolModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", ctx, pool)
	ret0, _ := ret[0].(*PoolModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockClientMockRecorder) CreatePool(ctx, pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockClient)(nil).CreatePool), ctx, pool)
}

// DeletePool mocks base method.
func (m *MockClient) DeletePool(ctx context.Context, poolID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePool", ctx, poolID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePool indicates an expected call of DeletePool.
func (mr *MockClientMockRecorder) DeletePool(ctx, poolID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePool", reflect.TypeOf((*MockClient)(nil).DeletePool), ctx, poolID)
}

// GetPool mocks base method.
func (m *MockClient) GetPool(ctx context.Context, edgeGatewayID, poolNameOrID string) (*PoolModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", ctx, edgeGatewayID, poolNameOrID)
	ret0, _ := ret[0].(*PoolModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPool indicates an expected call of GetPool.
func (mr *MockClientMockRecorder) GetPool(ctx, edgeGatewayID, poolNameOrID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockClient)(nil).GetPool), ctx, edgeGatewayID, poolNameOrID)
}

// GetServiceEngineGroup mocks base method.
func (m *MockClient) GetServiceEngineGroup(ctx context.Context, edgeGatewayID, nameOrID string) (*ServiceEngineGroupModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceEngineGroup", ctx, edgeGatewayID, nameOrID)
	ret0, _ := ret[0].(*ServiceEngineGroupModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceEngineGroup indicates an expected call of GetServiceEngineGroup.
func (mr *MockClientMockRecorder) GetServiceEngineGroup(ctx, edgeGatewayID, nameOrID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceEngineGroup", reflect.TypeOf((*MockClient)(nil).GetServiceEngineGroup), ctx, edgeGatewayID, nameOrID)
}

// ListPools mocks base method.
func (m *MockClient) ListPools(ctx context.Context, edgeGatewayID string) ([]*PoolModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPools", ctx, edgeGatewayID)
	ret0, _ := ret[0].([]*PoolModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPools indicates an expected call of ListPools.
func (mr *MockClientMockRecorder) ListPools(ctx, edgeGatewayID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*MockClient)(nil).ListPools), ctx, edgeGatewayID)
}

// ListServiceEngineGroups mocks base method.
func (m *MockClient) ListServiceEngineGroups(ctx context.Context, edgeGatewayID string) ([]*ServiceEngineGroupModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceEngineGroups", ctx, edgeGatewayID)
	ret0, _ := ret[0].([]*ServiceEngineGroupModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceEngineGroups indicates an expected call of ListServiceEngineGroups.
func (mr *MockClientMockRecorder) ListServiceEngineGroups(ctx, edgeGatewayID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceEngineGroups", reflect.TypeOf((*MockClient)(nil).ListServiceEngineGroups), ctx, edgeGatewayID)
}

// UpdatePool mocks base method.
func (m *MockClient) UpdatePool(ctx context.Context, poolID string, pool PoolModelRequest) (*PoolModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePool", ctx, poolID, pool)
	ret0, _ := ret[0].(*PoolModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePool indicates an expected call of UpdatePool.
func (mr *MockClientMockRecorder) UpdatePool(ctx, poolID, pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePool", reflect.TypeOf((*MockClient)(nil).UpdatePool), ctx, poolID, pool)
}

// MockclientFake is a mock of clientFake interface.
type MockclientFake struct {
	ctrl     *gomock.Controller
	recorder *MockclientFakeMockRecorder
	isgomock struct{}
}

// MockclientFakeMockRecorder is the mock recorder for MockclientFake.
type MockclientFakeMockRecorder struct {
	mock *MockclientFake
}

// NewMockclientFake creates a new mock instance.
func NewMockclientFake(ctrl *gomock.Controller) *MockclientFake {
	mock := &MockclientFake{ctrl: ctrl}
	mock.recorder = &MockclientFakeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientFake) EXPECT() *MockclientFakeMockRecorder {
	return m.recorder
}

// CreateNsxtAlbPool mocks base method.
func (m *MockclientFake) CreateNsxtAlbPool(albPoolConfig *types.NsxtAlbPool) (*govcd.NsxtAlbPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNsxtAlbPool", albPoolConfig)
	ret0, _ := ret[0].(*govcd.NsxtAlbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNsxtAlbPool indicates an expected call of CreateNsxtAlbPool.
func (mr *MockclientFakeMockRecorder) CreateNsxtAlbPool(albPoolConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNsxtAlbPool", reflect.TypeOf((*MockclientFake)(nil).CreateNsxtAlbPool), albPoolConfig)
}

// GetAlbPoolById mocks base method.
func (m *MockclientFake) GetAlbPoolById(id string) (*govcd.NsxtAlbPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbPoolById", id)
	ret0, _ := ret[0].(*govcd.NsxtAlbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbPoolById indicates an expected call of GetAlbPoolById.
func (mr *MockclientFakeMockRecorder) GetAlbPoolById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbPoolById", reflect.TypeOf((*MockclientFake)(nil).GetAlbPoolById), id)
}

// GetAlbPoolByName mocks base method.
func (m *MockclientFake) GetAlbPoolByName(edgeGatewayID, name string) (*govcd.NsxtAlbPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbPoolByName", edgeGatewayID, name)
	ret0, _ := ret[0].(*govcd.NsxtAlbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbPoolByName indicates an expected call of GetAlbPoolByName.
func (mr *MockclientFakeMockRecorder) GetAlbPoolByName(edgeGatewayID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbPoolByName", reflect.TypeOf((*MockclientFake)(nil).GetAlbPoolByName), edgeGatewayID, name)
}

// GetAllAlbPoolSummaries mocks base method.
func (m *MockclientFake) GetAllAlbPoolSummaries(edgeGatewayID string, queryParameters url.Values) ([]*govcd.NsxtAlbPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbPoolSummaries", edgeGatewayID, queryParameters)
	ret0, _ := ret[0].([]*govcd.NsxtAlbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbPoolSummaries indicates an expected call of GetAllAlbPoolSummaries.
func (mr *MockclientFakeMockRecorder) GetAllAlbPoolSummaries(edgeGatewayID, queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbPoolSummaries", reflect.TypeOf((*MockclientFake)(nil).GetAllAlbPoolSummaries), edgeGatewayID, queryParameters)
}

// GetAllAlbServiceEngineGroupAssignments mocks base method.
func (m *MockclientFake) GetAllAlbServiceEngineGroupAssignments(queryParameters url.Values) ([]*govcd.NsxtAlbServiceEngineGroupAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbServiceEngineGroupAssignments", queryParameters)
	ret0, _ := ret[0].([]*govcd.NsxtAlbServiceEngineGroupAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbServiceEngineGroupAssignments indicates an expected call of GetAllAlbServiceEngineGroupAssignments.
func (mr *MockclientFakeMockRecorder) GetAllAlbServiceEngineGroupAssignments(queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbServiceEngineGroupAssignments", reflect.TypeOf((*MockclientFake)(nil).GetAllAlbServiceEngineGroupAssignments), queryParameters)
}

// R mocks base method.
func (m *MockclientFake) R() *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R")
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// R indicates an expected call of R.
func (mr *MockclientFakeMockRecorder) R() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R", reflect.TypeOf((*MockclientFake)(nil).R))
}

// Refresh mocks base method.
func (m *MockclientFake) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockclientFakeMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockclientFake)(nil).Refresh))
}

// MockclientGoVCD is a mock of clientGoVCD interface.
type MockclientGoVCD struct {
	ctrl     *gomock.Controller
	recorder *MockclientGoVCDMockRecorder
	isgomock struct{}
}

// MockclientGoVCDMockRecorder is the mock recorder for MockclientGoVCD.
type MockclientGoVCDMockRecorder struct {
	mock *MockclientGoVCD
}

// NewMockclientGoVCD creates a new mock instance.
func NewMockclientGoVCD(ctrl *gomock.Controller) *MockclientGoVCD {
	mock := &MockclientGoVCD{ctrl: ctrl}
	mock.recorder = &MockclientGoVCDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientGoVCD) EXPECT() *MockclientGoVCDMockRecorder {
	return m.recorder
}

// CreateNsxtAlbPool mocks base method.
func (m *MockclientGoVCD) CreateNsxtAlbPool(albPoolConfig *types.NsxtAlbPool) (*govcd.NsxtAlbPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNsxtAlbPool", albPoolConfig)
	ret0, _ := ret[0].(*govcd.NsxtAlbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNsxtAlbPool indicates an expected call of CreateNsxtAlbPool.
func (mr *MockclientGoVCDMockRecorder) CreateNsxtAlbPool(albPoolConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNsxtAlbPool", reflect.TypeOf((*MockclientGoVCD)(nil).CreateNsxtAlbPool), albPoolConfig)
}

// GetAlbPoolById mocks base method.
func (m *MockclientGoVCD) GetAlbPoolById(id string) (*govcd.NsxtAlbPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbPoolById", id)
	ret0, _ := ret[0].(*govcd.NsxtAlbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbPoolById indicates an expected call of GetAlbPoolById.
func (mr *MockclientGoVCDMockRecorder) GetAlbPoolById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbPoolById", reflect.TypeOf((*MockclientGoVCD)(nil).GetAlbPoolById), id)
}

// GetAlbPoolByName mocks base method.
func (m *MockclientGoVCD) GetAlbPoolByName(edgeGatewayID, name string) (*govcd.NsxtAlbPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbPoolByName", edgeGatewayID, name)
	ret0, _ := ret[0].(*govcd.NsxtAlbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbPoolByName indicates an expected call of GetAlbPoolByName.
func (mr *MockclientGoVCDMockRecorder) GetAlbPoolByName(edgeGatewayID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbPoolByName", reflect.TypeOf((*MockclientGoVCD)(nil).GetAlbPoolByName), edgeGatewayID, name)
}

// GetAllAlbPoolSummaries mocks base method.
func (m *MockclientGoVCD) GetAllAlbPoolSummaries(edgeGatewayID string, queryParameters url.Values) ([]*govcd.NsxtAlbPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbPoolSummaries", edgeGatewayID, queryParameters)
	ret0, _ := ret[0].([]*govcd.NsxtAlbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbPoolSummaries indicates an expected call of GetAllAlbPoolSummaries.
func (mr *MockclientGoVCDMockRecorder) GetAllAlbPoolSummaries(edgeGatewayID, queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbPoolSummaries", reflect.TypeOf((*MockclientGoVCD)(nil).GetAllAlbPoolSummaries), edgeGatewayID, queryParameters)
}

// GetAllAlbServiceEngineGroupAssignments mocks base method.
func (m *MockclientGoVCD) GetAllAlbServiceEngineGroupAssignments(queryParameters url.Values) ([]*govcd.NsxtAlbServiceEngineGroupAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbServiceEngineGroupAssignments", queryParameters)
	ret0, _ := ret[0].([]*govcd.NsxtAlbServiceEngineGroupAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbServiceEngineGroupAssignments indicates an expected call of GetAllAlbServiceEngineGroupAssignments.
func (mr *MockclientGoVCDMockRecorder) GetAllAlbServiceEngineGroupAssignments(queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbServiceEngineGroupAssignments", reflect.TypeOf((*MockclientGoVCD)(nil).GetAllAlbServiceEngineGroupAssignments), queryParameters)
}

// MockclientCloudavenue is a mock of clientCloudavenue interface.
type MockclientCloudavenue struct {
	ctrl     *gomock.Controller
	recorder *MockclientCloudavenueMockRecorder
	isgomock struct{}
}

// MockclientCloudavenueMockRecorder is the mock recorder for MockclientCloudavenue.
type MockclientCloudavenueMockRecorder struct {
	mock *MockclientCloudavenue
}

// NewMockclientCloudavenue creates a new mock instance.
func NewMockclientCloudavenue(ctrl *gomock.Controller) *MockclientCloudavenue {
	mock := &MockclientCloudavenue{ctrl: ctrl}
	mock.recorder = &MockclientCloudavenueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientCloudavenue) EXPECT() *MockclientCloudavenueMockRecorder {
	return m.recorder
}

// R mocks base method.
func (m *MockclientCloudavenue) R() *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R")
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// R indicates an expected call of R.
func (mr *MockclientCloudavenueMockRecorder) R() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R", reflect.TypeOf((*MockclientCloudavenue)(nil).R))
}

// Refresh mocks base method.
func (m *MockclientCloudavenue) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockclientCloudavenueMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockclientCloudavenue)(nil).Refresh))
}
