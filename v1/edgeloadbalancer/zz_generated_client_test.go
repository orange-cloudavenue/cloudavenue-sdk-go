// SPDX-FileCopyrightText: Copyright (c) 2025 Orange
// SPDX-License-Identifier: Mozilla Public License 2.0
// This software is distributed under the MPL-2.0 license.
// the text of which is available at https://www.mozilla.org/en-US/MPL/2.0/
// or see the "LICENSE" file for more details.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=zz_generated_client_test.go -self_package github.com/orange-cloudavenue/cloudavenue-sdk-go/v1/edgeloadbalancer -package edgeloadbalancer -copyright_file ../../mock_header.txt
//

// Package edgeloadbalancer is a generated GoMock package.
package edgeloadbalancer

import (
	context "context"
	url "net/url"
	reflect "reflect"

	resty "github.com/go-resty/resty/v2"
	govcd "github.com/vmware/go-vcloud-director/v2/govcd"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ListServiceEngineGroups mocks base method.
func (m *MockClient) ListServiceEngineGroups(ctx context.Context, edgeGatewayID string) ([]*ServiceEngineGroupModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceEngineGroups", ctx, edgeGatewayID)
	ret0, _ := ret[0].([]*ServiceEngineGroupModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceEngineGroups indicates an expected call of ListServiceEngineGroups.
func (mr *MockClientMockRecorder) ListServiceEngineGroups(ctx, edgeGatewayID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceEngineGroups", reflect.TypeOf((*MockClient)(nil).ListServiceEngineGroups), ctx, edgeGatewayID)
}

// MockinternalClient is a mock of internalClient interface.
type MockinternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockinternalClientMockRecorder
	isgomock struct{}
}

// MockinternalClientMockRecorder is the mock recorder for MockinternalClient.
type MockinternalClientMockRecorder struct {
	mock *MockinternalClient
}

// NewMockinternalClient creates a new mock instance.
func NewMockinternalClient(ctrl *gomock.Controller) *MockinternalClient {
	mock := &MockinternalClient{ctrl: ctrl}
	mock.recorder = &MockinternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinternalClient) EXPECT() *MockinternalClientMockRecorder {
	return m.recorder
}

// GetAllAlbServiceEngineGroupAssignments mocks base method.
func (m *MockinternalClient) GetAllAlbServiceEngineGroupAssignments(queryParameters url.Values) ([]*govcd.NsxtAlbServiceEngineGroupAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbServiceEngineGroupAssignments", queryParameters)
	ret0, _ := ret[0].([]*govcd.NsxtAlbServiceEngineGroupAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbServiceEngineGroupAssignments indicates an expected call of GetAllAlbServiceEngineGroupAssignments.
func (mr *MockinternalClientMockRecorder) GetAllAlbServiceEngineGroupAssignments(queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbServiceEngineGroupAssignments", reflect.TypeOf((*MockinternalClient)(nil).GetAllAlbServiceEngineGroupAssignments), queryParameters)
}

// R mocks base method.
func (m *MockinternalClient) R() *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R")
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// R indicates an expected call of R.
func (mr *MockinternalClientMockRecorder) R() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R", reflect.TypeOf((*MockinternalClient)(nil).R))
}

// Refresh mocks base method.
func (m *MockinternalClient) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockinternalClientMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockinternalClient)(nil).Refresh))
}

// MockclientGoVCD is a mock of clientGoVCD interface.
type MockclientGoVCD struct {
	ctrl     *gomock.Controller
	recorder *MockclientGoVCDMockRecorder
	isgomock struct{}
}

// MockclientGoVCDMockRecorder is the mock recorder for MockclientGoVCD.
type MockclientGoVCDMockRecorder struct {
	mock *MockclientGoVCD
}

// NewMockclientGoVCD creates a new mock instance.
func NewMockclientGoVCD(ctrl *gomock.Controller) *MockclientGoVCD {
	mock := &MockclientGoVCD{ctrl: ctrl}
	mock.recorder = &MockclientGoVCDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientGoVCD) EXPECT() *MockclientGoVCDMockRecorder {
	return m.recorder
}

// GetAllAlbServiceEngineGroupAssignments mocks base method.
func (m *MockclientGoVCD) GetAllAlbServiceEngineGroupAssignments(queryParameters url.Values) ([]*govcd.NsxtAlbServiceEngineGroupAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbServiceEngineGroupAssignments", queryParameters)
	ret0, _ := ret[0].([]*govcd.NsxtAlbServiceEngineGroupAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbServiceEngineGroupAssignments indicates an expected call of GetAllAlbServiceEngineGroupAssignments.
func (mr *MockclientGoVCDMockRecorder) GetAllAlbServiceEngineGroupAssignments(queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbServiceEngineGroupAssignments", reflect.TypeOf((*MockclientGoVCD)(nil).GetAllAlbServiceEngineGroupAssignments), queryParameters)
}

// MockclientCloudavenue is a mock of clientCloudavenue interface.
type MockclientCloudavenue struct {
	ctrl     *gomock.Controller
	recorder *MockclientCloudavenueMockRecorder
	isgomock struct{}
}

// MockclientCloudavenueMockRecorder is the mock recorder for MockclientCloudavenue.
type MockclientCloudavenueMockRecorder struct {
	mock *MockclientCloudavenue
}

// NewMockclientCloudavenue creates a new mock instance.
func NewMockclientCloudavenue(ctrl *gomock.Controller) *MockclientCloudavenue {
	mock := &MockclientCloudavenue{ctrl: ctrl}
	mock.recorder = &MockclientCloudavenueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientCloudavenue) EXPECT() *MockclientCloudavenueMockRecorder {
	return m.recorder
}

// R mocks base method.
func (m *MockclientCloudavenue) R() *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R")
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// R indicates an expected call of R.
func (mr *MockclientCloudavenueMockRecorder) R() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R", reflect.TypeOf((*MockclientCloudavenue)(nil).R))
}

// Refresh mocks base method.
func (m *MockclientCloudavenue) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockclientCloudavenueMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockclientCloudavenue)(nil).Refresh))
}
