/*
 * SPDX-FileCopyrightText: Copyright (c) 2025 Orange
 * SPDX-License-Identifier: Mozilla Public License 2.0
 *
 * This software is distributed under the MPL-2.0 license.
 * the text of which is available at https://www.mozilla.org/en-US/MPL/2.0/
 * or see the "LICENSE" file for more details.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mock/zz_generated_client.go
//

// Package mock_iam is a generated GoMock package.
package mock_iam

import (
	reflect "reflect"

	govcd "github.com/vmware/go-vcloud-director/v2/govcd"
	types "github.com/vmware/go-vcloud-director/v2/types/v56"
	gomock "go.uber.org/mock/gomock"
)

// MockclientGoVCDAdminOrg is a mock of clientGoVCDAdminOrg interface.
type MockclientGoVCDAdminOrg struct {
	ctrl     *gomock.Controller
	recorder *MockclientGoVCDAdminOrgMockRecorder
	isgomock struct{}
}

// MockclientGoVCDAdminOrgMockRecorder is the mock recorder for MockclientGoVCDAdminOrg.
type MockclientGoVCDAdminOrgMockRecorder struct {
	mock *MockclientGoVCDAdminOrg
}

// NewMockclientGoVCDAdminOrg creates a new mock instance.
func NewMockclientGoVCDAdminOrg(ctrl *gomock.Controller) *MockclientGoVCDAdminOrg {
	mock := &MockclientGoVCDAdminOrg{ctrl: ctrl}
	mock.recorder = &MockclientGoVCDAdminOrgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientGoVCDAdminOrg) EXPECT() *MockclientGoVCDAdminOrgMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockclientGoVCDAdminOrg) CreateUser(arg0 *types.User) (*govcd.OrgUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*govcd.OrgUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockclientGoVCDAdminOrgMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).CreateUser), arg0)
}

// GetRoleReference mocks base method.
func (m *MockclientGoVCDAdminOrg) GetRoleReference(roleName string) (*types.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleReference", roleName)
	ret0, _ := ret[0].(*types.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleReference indicates an expected call of GetRoleReference.
func (mr *MockclientGoVCDAdminOrgMockRecorder) GetRoleReference(roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleReference", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).GetRoleReference), roleName)
}

// GetUserByNameOrId mocks base method.
func (m *MockclientGoVCDAdminOrg) GetUserByNameOrId(identifier string, refresh bool) (*govcd.OrgUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByNameOrId", identifier, refresh)
	ret0, _ := ret[0].(*govcd.OrgUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByNameOrId indicates an expected call of GetUserByNameOrId.
func (mr *MockclientGoVCDAdminOrgMockRecorder) GetUserByNameOrId(identifier, refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByNameOrId", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).GetUserByNameOrId), identifier, refresh)
}

// MockclientCloudavenue is a mock of clientCloudavenue interface.
type MockclientCloudavenue struct {
	ctrl     *gomock.Controller
	recorder *MockclientCloudavenueMockRecorder
	isgomock struct{}
}

// MockclientCloudavenueMockRecorder is the mock recorder for MockclientCloudavenue.
type MockclientCloudavenueMockRecorder struct {
	mock *MockclientCloudavenue
}

// NewMockclientCloudavenue creates a new mock instance.
func NewMockclientCloudavenue(ctrl *gomock.Controller) *MockclientCloudavenue {
	mock := &MockclientCloudavenue{ctrl: ctrl}
	mock.recorder = &MockclientCloudavenueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientCloudavenue) EXPECT() *MockclientCloudavenueMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockclientCloudavenue) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockclientCloudavenueMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockclientCloudavenue)(nil).Refresh))
}
