// SPDX-FileCopyrightText: Copyright (c) 2025 Orange
// SPDX-License-Identifier: Mozilla Public License 2.0
// This software is distributed under the MPL-2.0 license.
// the text of which is available at https://www.mozilla.org/en-US/MPL/2.0/
// or see the "LICENSE" file for more details.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: certificate_types.go
//
// Generated by this command:
//
//	mockgen -source=certificate_types.go -destination=zz_generated_client_certificate_test.go -self_package github.com/orange-cloudavenue/cloudavenue-sdk-go/v1/org -package org -copyright_file ../../mock_header.txt
//

// Package org is a generated GoMock package.
package org

import (
	reflect "reflect"

	govcd "github.com/vmware/go-vcloud-director/v2/govcd"
	gomock "go.uber.org/mock/gomock"
)

// MockinternalCertificateClient is a mock of internalCertificateClient interface.
type MockinternalCertificateClient struct {
	ctrl     *gomock.Controller
	recorder *MockinternalCertificateClientMockRecorder
	isgomock struct{}
}

// MockinternalCertificateClientMockRecorder is the mock recorder for MockinternalCertificateClient.
type MockinternalCertificateClientMockRecorder struct {
	mock *MockinternalCertificateClient
}

// NewMockinternalCertificateClient creates a new mock instance.
func NewMockinternalCertificateClient(ctrl *gomock.Controller) *MockinternalCertificateClient {
	mock := &MockinternalCertificateClient{ctrl: ctrl}
	mock.recorder = &MockinternalCertificateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinternalCertificateClient) EXPECT() *MockinternalCertificateClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockinternalCertificateClient) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockinternalCertificateClientMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockinternalCertificateClient)(nil).Delete))
}

// Update mocks base method.
func (m *MockinternalCertificateClient) Update() (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockinternalCertificateClientMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockinternalCertificateClient)(nil).Update))
}
