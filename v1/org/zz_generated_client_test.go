// SPDX-FileCopyrightText: Copyright (c) 2025 Orange
// SPDX-License-Identifier: Mozilla Public License 2.0
// This software is distributed under the MPL-2.0 license.
// the text of which is available at https://www.mozilla.org/en-US/MPL/2.0/
// or see the "LICENSE" file for more details.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=zz_generated_client_test.go -self_package github.com/orange-cloudavenue/cloudavenue-sdk-go/v1/org -package org -copyright_file ../../mock_header.txt
//

// Package org is a generated GoMock package.
package org

import (
	context "context"
	url "net/url"
	reflect "reflect"

	resty "github.com/go-resty/resty/v2"
	commoncloudavenue "github.com/orange-cloudavenue/cloudavenue-sdk-go/pkg/common/cloudavenue"
	govcd "github.com/vmware/go-vcloud-director/v2/govcd"
	types "github.com/vmware/go-vcloud-director/v2/types/v56"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCertificateInLibrary mocks base method.
func (m *MockClient) CreateCertificateInLibrary(ctx context.Context, cert *CertificateCreateRequest) (*CertificateModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateInLibrary", ctx, cert)
	ret0, _ := ret[0].(*CertificateModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateInLibrary indicates an expected call of CreateCertificateInLibrary.
func (mr *MockClientMockRecorder) CreateCertificateInLibrary(ctx, cert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateInLibrary", reflect.TypeOf((*MockClient)(nil).CreateCertificateInLibrary), ctx, cert)
}

// DeleteCertificateFromLibrary mocks base method.
func (m *MockClient) DeleteCertificateFromLibrary(ctx context.Context, certificateID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateFromLibrary", ctx, certificateID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateFromLibrary indicates an expected call of DeleteCertificateFromLibrary.
func (mr *MockClientMockRecorder) DeleteCertificateFromLibrary(ctx, certificateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateFromLibrary", reflect.TypeOf((*MockClient)(nil).DeleteCertificateFromLibrary), ctx, certificateID)
}

// GetCertificateFromLibrary mocks base method.
func (m *MockClient) GetCertificateFromLibrary(ctx context.Context, certificateNameOrID string) (*CertificateModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFromLibrary", ctx, certificateNameOrID)
	ret0, _ := ret[0].(*CertificateModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFromLibrary indicates an expected call of GetCertificateFromLibrary.
func (mr *MockClientMockRecorder) GetCertificateFromLibrary(ctx, certificateNameOrID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFromLibrary", reflect.TypeOf((*MockClient)(nil).GetCertificateFromLibrary), ctx, certificateNameOrID)
}

// GetProperties mocks base method.
func (m *MockClient) GetProperties(ctx context.Context) (*PropertiesModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties", ctx)
	ret0, _ := ret[0].(*PropertiesModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperties indicates an expected call of GetProperties.
func (mr *MockClientMockRecorder) GetProperties(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockClient)(nil).GetProperties), ctx)
}

// ListCertificatesInLibrary mocks base method.
func (m *MockClient) ListCertificatesInLibrary(ctx context.Context) (CertificatesModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificatesInLibrary", ctx)
	ret0, _ := ret[0].(CertificatesModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificatesInLibrary indicates an expected call of ListCertificatesInLibrary.
func (mr *MockClientMockRecorder) ListCertificatesInLibrary(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesInLibrary", reflect.TypeOf((*MockClient)(nil).ListCertificatesInLibrary), ctx)
}

// UpdateCertificateInLibrary mocks base method.
func (m *MockClient) UpdateCertificateInLibrary(ctx context.Context, certificateID string, cert *CertificateUpdateRequest) (*CertificateModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateInLibrary", ctx, certificateID, cert)
	ret0, _ := ret[0].(*CertificateModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCertificateInLibrary indicates an expected call of UpdateCertificateInLibrary.
func (mr *MockClientMockRecorder) UpdateCertificateInLibrary(ctx, certificateID, cert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateInLibrary", reflect.TypeOf((*MockClient)(nil).UpdateCertificateInLibrary), ctx, certificateID, cert)
}

// UpdateProperties mocks base method.
func (m *MockClient) UpdateProperties(ctx context.Context, properties *PropertiesRequest) (*commoncloudavenue.JobCreatedAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProperties", ctx, properties)
	ret0, _ := ret[0].(*commoncloudavenue.JobCreatedAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperties indicates an expected call of UpdateProperties.
func (mr *MockClientMockRecorder) UpdateProperties(ctx, properties any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperties", reflect.TypeOf((*MockClient)(nil).UpdateProperties), ctx, properties)
}

// MockinternalClient is a mock of internalClient interface.
type MockinternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockinternalClientMockRecorder
	isgomock struct{}
}

// MockinternalClientMockRecorder is the mock recorder for MockinternalClient.
type MockinternalClientMockRecorder struct {
	mock *MockinternalClient
}

// NewMockinternalClient creates a new mock instance.
func NewMockinternalClient(ctrl *gomock.Controller) *MockinternalClient {
	mock := &MockinternalClient{ctrl: ctrl}
	mock.recorder = &MockinternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinternalClient) EXPECT() *MockinternalClientMockRecorder {
	return m.recorder
}

// AddCertificateToLibrary mocks base method.
func (m *MockinternalClient) AddCertificateToLibrary(certificateConfig *types.CertificateLibraryItem) (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCertificateToLibrary", certificateConfig)
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCertificateToLibrary indicates an expected call of AddCertificateToLibrary.
func (mr *MockinternalClientMockRecorder) AddCertificateToLibrary(certificateConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificateToLibrary", reflect.TypeOf((*MockinternalClient)(nil).AddCertificateToLibrary), certificateConfig)
}

// GetAllCertificatesFromLibrary mocks base method.
func (m *MockinternalClient) GetAllCertificatesFromLibrary(queryParameters url.Values) ([]*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCertificatesFromLibrary", queryParameters)
	ret0, _ := ret[0].([]*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCertificatesFromLibrary indicates an expected call of GetAllCertificatesFromLibrary.
func (mr *MockinternalClientMockRecorder) GetAllCertificatesFromLibrary(queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCertificatesFromLibrary", reflect.TypeOf((*MockinternalClient)(nil).GetAllCertificatesFromLibrary), queryParameters)
}

// GetCertificateFromLibraryById mocks base method.
func (m *MockinternalClient) GetCertificateFromLibraryById(id string) (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFromLibraryById", id)
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFromLibraryById indicates an expected call of GetCertificateFromLibraryById.
func (mr *MockinternalClientMockRecorder) GetCertificateFromLibraryById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFromLibraryById", reflect.TypeOf((*MockinternalClient)(nil).GetCertificateFromLibraryById), id)
}

// GetCertificateFromLibraryByName mocks base method.
func (m *MockinternalClient) GetCertificateFromLibraryByName(name string) (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFromLibraryByName", name)
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFromLibraryByName indicates an expected call of GetCertificateFromLibraryByName.
func (mr *MockinternalClientMockRecorder) GetCertificateFromLibraryByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFromLibraryByName", reflect.TypeOf((*MockinternalClient)(nil).GetCertificateFromLibraryByName), name)
}

// R mocks base method.
func (m *MockinternalClient) R() *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R")
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// R indicates an expected call of R.
func (mr *MockinternalClientMockRecorder) R() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R", reflect.TypeOf((*MockinternalClient)(nil).R))
}

// Refresh mocks base method.
func (m *MockinternalClient) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockinternalClientMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockinternalClient)(nil).Refresh))
}

// MockclientGoVCDAdminOrg is a mock of clientGoVCDAdminOrg interface.
type MockclientGoVCDAdminOrg struct {
	ctrl     *gomock.Controller
	recorder *MockclientGoVCDAdminOrgMockRecorder
	isgomock struct{}
}

// MockclientGoVCDAdminOrgMockRecorder is the mock recorder for MockclientGoVCDAdminOrg.
type MockclientGoVCDAdminOrgMockRecorder struct {
	mock *MockclientGoVCDAdminOrg
}

// NewMockclientGoVCDAdminOrg creates a new mock instance.
func NewMockclientGoVCDAdminOrg(ctrl *gomock.Controller) *MockclientGoVCDAdminOrg {
	mock := &MockclientGoVCDAdminOrg{ctrl: ctrl}
	mock.recorder = &MockclientGoVCDAdminOrgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientGoVCDAdminOrg) EXPECT() *MockclientGoVCDAdminOrgMockRecorder {
	return m.recorder
}

// AddCertificateToLibrary mocks base method.
func (m *MockclientGoVCDAdminOrg) AddCertificateToLibrary(certificateConfig *types.CertificateLibraryItem) (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCertificateToLibrary", certificateConfig)
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCertificateToLibrary indicates an expected call of AddCertificateToLibrary.
func (mr *MockclientGoVCDAdminOrgMockRecorder) AddCertificateToLibrary(certificateConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificateToLibrary", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).AddCertificateToLibrary), certificateConfig)
}

// GetAllCertificatesFromLibrary mocks base method.
func (m *MockclientGoVCDAdminOrg) GetAllCertificatesFromLibrary(queryParameters url.Values) ([]*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCertificatesFromLibrary", queryParameters)
	ret0, _ := ret[0].([]*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCertificatesFromLibrary indicates an expected call of GetAllCertificatesFromLibrary.
func (mr *MockclientGoVCDAdminOrgMockRecorder) GetAllCertificatesFromLibrary(queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCertificatesFromLibrary", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).GetAllCertificatesFromLibrary), queryParameters)
}

// GetCertificateFromLibraryById mocks base method.
func (m *MockclientGoVCDAdminOrg) GetCertificateFromLibraryById(id string) (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFromLibraryById", id)
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFromLibraryById indicates an expected call of GetCertificateFromLibraryById.
func (mr *MockclientGoVCDAdminOrgMockRecorder) GetCertificateFromLibraryById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFromLibraryById", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).GetCertificateFromLibraryById), id)
}

// GetCertificateFromLibraryByName mocks base method.
func (m *MockclientGoVCDAdminOrg) GetCertificateFromLibraryByName(name string) (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFromLibraryByName", name)
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFromLibraryByName indicates an expected call of GetCertificateFromLibraryByName.
func (mr *MockclientGoVCDAdminOrgMockRecorder) GetCertificateFromLibraryByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFromLibraryByName", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).GetCertificateFromLibraryByName), name)
}

// MockclientCloudavenue is a mock of clientCloudavenue interface.
type MockclientCloudavenue struct {
	ctrl     *gomock.Controller
	recorder *MockclientCloudavenueMockRecorder
	isgomock struct{}
}

// MockclientCloudavenueMockRecorder is the mock recorder for MockclientCloudavenue.
type MockclientCloudavenueMockRecorder struct {
	mock *MockclientCloudavenue
}

// NewMockclientCloudavenue creates a new mock instance.
func NewMockclientCloudavenue(ctrl *gomock.Controller) *MockclientCloudavenue {
	mock := &MockclientCloudavenue{ctrl: ctrl}
	mock.recorder = &MockclientCloudavenueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientCloudavenue) EXPECT() *MockclientCloudavenueMockRecorder {
	return m.recorder
}

// R mocks base method.
func (m *MockclientCloudavenue) R() *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R")
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// R indicates an expected call of R.
func (mr *MockclientCloudavenueMockRecorder) R() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R", reflect.TypeOf((*MockclientCloudavenue)(nil).R))
}

// Refresh mocks base method.
func (m *MockclientCloudavenue) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockclientCloudavenueMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockclientCloudavenue)(nil).Refresh))
}
