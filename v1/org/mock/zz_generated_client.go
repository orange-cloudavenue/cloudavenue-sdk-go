// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mock/zz_generated_client.go
//

// Package mock_org is a generated GoMock package.
package mock_org

import (
	url "net/url"
	reflect "reflect"

	govcd "github.com/vmware/go-vcloud-director/v2/govcd"
	types "github.com/vmware/go-vcloud-director/v2/types/v56"
	gomock "go.uber.org/mock/gomock"
)

// MockclientGoVCDAdminOrg is a mock of clientGoVCDAdminOrg interface.
type MockclientGoVCDAdminOrg struct {
	ctrl     *gomock.Controller
	recorder *MockclientGoVCDAdminOrgMockRecorder
	isgomock struct{}
}

// MockclientGoVCDAdminOrgMockRecorder is the mock recorder for MockclientGoVCDAdminOrg.
type MockclientGoVCDAdminOrgMockRecorder struct {
	mock *MockclientGoVCDAdminOrg
}

// NewMockclientGoVCDAdminOrg creates a new mock instance.
func NewMockclientGoVCDAdminOrg(ctrl *gomock.Controller) *MockclientGoVCDAdminOrg {
	mock := &MockclientGoVCDAdminOrg{ctrl: ctrl}
	mock.recorder = &MockclientGoVCDAdminOrgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientGoVCDAdminOrg) EXPECT() *MockclientGoVCDAdminOrgMockRecorder {
	return m.recorder
}

// AddCertificateToLibrary mocks base method.
func (m *MockclientGoVCDAdminOrg) AddCertificateToLibrary(certificateConfig *types.CertificateLibraryItem) (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCertificateToLibrary", certificateConfig)
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCertificateToLibrary indicates an expected call of AddCertificateToLibrary.
func (mr *MockclientGoVCDAdminOrgMockRecorder) AddCertificateToLibrary(certificateConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificateToLibrary", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).AddCertificateToLibrary), certificateConfig)
}

// GetAllCertificatesFromLibrary mocks base method.
func (m *MockclientGoVCDAdminOrg) GetAllCertificatesFromLibrary(queryParameters url.Values) ([]*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCertificatesFromLibrary", queryParameters)
	ret0, _ := ret[0].([]*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCertificatesFromLibrary indicates an expected call of GetAllCertificatesFromLibrary.
func (mr *MockclientGoVCDAdminOrgMockRecorder) GetAllCertificatesFromLibrary(queryParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCertificatesFromLibrary", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).GetAllCertificatesFromLibrary), queryParameters)
}

// GetCertificateFromLibraryById mocks base method.
func (m *MockclientGoVCDAdminOrg) GetCertificateFromLibraryById(id string) (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFromLibraryById", id)
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFromLibraryById indicates an expected call of GetCertificateFromLibraryById.
func (mr *MockclientGoVCDAdminOrgMockRecorder) GetCertificateFromLibraryById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFromLibraryById", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).GetCertificateFromLibraryById), id)
}

// GetCertificateFromLibraryByName mocks base method.
func (m *MockclientGoVCDAdminOrg) GetCertificateFromLibraryByName(name string) (*govcd.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFromLibraryByName", name)
	ret0, _ := ret[0].(*govcd.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFromLibraryByName indicates an expected call of GetCertificateFromLibraryByName.
func (mr *MockclientGoVCDAdminOrgMockRecorder) GetCertificateFromLibraryByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFromLibraryByName", reflect.TypeOf((*MockclientGoVCDAdminOrg)(nil).GetCertificateFromLibraryByName), name)
}

// MockclientCloudavenue is a mock of clientCloudavenue interface.
type MockclientCloudavenue struct {
	ctrl     *gomock.Controller
	recorder *MockclientCloudavenueMockRecorder
	isgomock struct{}
}

// MockclientCloudavenueMockRecorder is the mock recorder for MockclientCloudavenue.
type MockclientCloudavenueMockRecorder struct {
	mock *MockclientCloudavenue
}

// NewMockclientCloudavenue creates a new mock instance.
func NewMockclientCloudavenue(ctrl *gomock.Controller) *MockclientCloudavenue {
	mock := &MockclientCloudavenue{ctrl: ctrl}
	mock.recorder = &MockclientCloudavenueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientCloudavenue) EXPECT() *MockclientCloudavenueMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockclientCloudavenue) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockclientCloudavenueMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockclientCloudavenue)(nil).Refresh))
}
